id: use_functions_with_chat_models
name: Use Functions with Chat Models
inputs:
  chat_history:
    type: list
    default:
    - inputs:
        question: What is the weather like in Boston?
      outputs:
        answer: '{"forecast":["sunny","windy"],"location":"Boston","temperature":"72","unit":"fahrenheit"}'
        llm_output:
          content: null
          function_call:
            name: get_current_weather
            arguments: |-
              {
                "location": "Boston"
              }
          role: assistant
    is_chat_input: false
    is_chat_history: true
  question:
    type: string
    default: How about London next week?
    is_chat_input: true
outputs:
  answer:
    type: string
    reference: ${create_sentence.output}
    is_chat_output: true
  llm_output:
    type: object
    reference: ${use_functions_with_chat_models.output}
nodes:
- name: run_function
  type: python
  source:
    type: code
    path: run_function.py
  inputs:
    response_message: ${use_functions_with_chat_models.output}
  use_variants: false
- name: use_functions_with_chat_models
  type: llm
  source:
    type: code
    path: use_functions_with_chat_models.jinja2
  inputs:
    deployment_name: gpt-4o-mini
    temperature: 0.7
    top_p: 1
    functions:
    - name: get_directions
      description: API to search routes based on origin and destination information.
        If either origin or destination is missing, the user is asked politely
        to provide them, remembering the values already provided.
      parameters:
        type: object
        properties:
          origin:
            type: string
            description: The starting point of the journey
          destination:
            type: string
            description: The ending point of the journey
        required:
        - origin
        - destination
    - name: get_future_directions
      description: API to search routes based on origin and destination information
        considering future departure times. If any values are missing, the user
        is prompted to provide them while previous inputs are remembered.
      parameters:
        type: object
        properties:
          origin:
            type: string
            description: The starting point of the journey
          destination:
            type: string
            description: The ending point of the journey
          departure_time:
            type: string
            format: datetime
            description: The departure time in %Y%m%d%H%M format. Defaults to the year 2024
              if no year is specified.
        required:
        - origin
        - destination
        - departure_time
    - name: get_current_time
      description: Get the current time in a given location
      parameters:
        type: object
        properties:
          location:
            type: string
            description: The location name. The pytz is used to get the timezone for that
              location. Location names should be in a format like Asia/Seoul,
              America/New_York, Asia/Bangkok, Europe/London
        required:
        - location
    - name: get_current_weather
      description: Gets the current weather information for a specified location. If
        the location is missing, the user is politely asked to provide it,
        keeping track of any other given parameters.
      parameters:
        type: object
        properties:
          location:
            type: string
            description: The city's name, expected in formats like 서울, 부산, etc.
        required:
        - location
    function_call: auto
    chat_history: ${inputs.chat_history}
    question: ${inputs.question}
  provider: AzureOpenAI
  connection: mygpt4oeastus
  api: chat
  module: promptflow.tools.aoai
  use_variants: false
- name: create_sentence
  type: llm
  source:
    type: code
    path: create_sentence.jinja2
  inputs:
    deployment_name: gpt-4o-mini
    temperature: 1
    top_p: 1
    max_tokens: 100
    functioncalling: ${run_function.output}
    history: ${inputs.chat_history}
    question: ${inputs.question}
  provider: AzureOpenAI
  connection: mygpt4oeastus
  api: chat
  module: promptflow.tools.aoai
  use_variants: false
node_variants: {}
environment:
  python_requirements_txt: requirements.txt
